services:
  redis-1:
    build: component/redis/
    container_name: redis-1
    volumes:
      - ./component/redis/redis-data/node1:/data
    ports:
      - "6379:6379"
      - "16379:16379"
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-2:
    build: component/redis/
    container_name: redis-2
    volumes:
      - ./component/redis/redis-data/node2:/data
    ports:
      - "6380:6379"
      - "16380:16380"
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-3:
    build: component/redis/
    container_name: redis-3
    volumes:
      - ./component/redis/redis-data/node3:/data
    ports:
      - "6381:6379"
      - "16381:16381"
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-4:
    build: component/redis/
    container_name: redis-4
    volumes:
      - ./component/redis/redis-data/node4:/data
    ports:
      - "6382:6379"
      - "16382:16382"
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-5:
    build: component/redis/
    container_name: redis-5
    volumes:
      - ./component/redis/redis-data/node5:/data
    ports:
      - "6383:6379"
      - "16383:16383"
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-6:
    build: component/redis/
    container_name: redis-6
    volumes:
      - ./component/redis/redis-data/node6:/data
    ports:
      - "6384:6379"
      - "16384:16384"
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-init:
    build: component/redis/
    container_name: redis-init
    depends_on:
      - redis-1
      - redis-2
      - redis-3
      - redis-4
      - redis-5
      - redis-6
    entrypoint: [ "/bin/sh", "-c", "/usr/local/bin/init-redis-cluster.sh" ]
    volumes:
      - ./component/redis/redis-data:/data
    restart: "on-failure"
  
  simple_api_build:
    build:
      context: simple-api/
    image: simple_api

  routing_api_build:
    build:
      context: routing-api/
    image: routing_api

  simple_api_1:
    image: simple_api
    container_name: simple_api_1
    ports:
      - "${SIMPLE_API_1_PORT}:8080"
    environment:
      - QUARKUS_HTTP_PORT=8080
    depends_on:
      - simple_api_build

  simple_api_2:
    image: simple_api
    container_name: simple_api_2
    ports:
      - "${SIMPLE_API_2_PORT}:8080"
    environment:
      - QUARKUS_HTTP_PORT=8080
    depends_on:
      - simple_api_build

  simple_api_3:
    image: simple_api
    container_name: simple_api_3
    ports:
      - "${SIMPLE_API_3_PORT}:8080"
    environment:
      - QUARKUS_HTTP_PORT=8080
    depends_on:
      - simple_api_build

  simple_api_4:
    image: simple_api
    container_name: simple_api_4
    ports:
      - "${SIMPLE_API_4_PORT}:8080"
    environment:
      - QUARKUS_HTTP_PORT=8080
    depends_on:
      - simple_api_build

  simple_api_5:
    image: simple_api
    container_name: simple_api_5
    ports:
      - "${SIMPLE_API_5_PORT}:8080"
    environment:
      - QUARKUS_HTTP_PORT=8080
    depends_on:
      - simple_api_build

  routing_api:
    image: routing_api
    container_name: routing_api
    ports:
      - "8080:8080"
      - "5005:5005"
    environment:
      - QUARKUS_HTTP_PORT=8080
      - "AVAIcomponentLE_API_INSTANCES=${AVAIcomponentLE_API_INSTANCES}"
    depends_on:
      - simple_api_1
      - simple_api_2
      - simple_api_3
      - simple_api_4
      - simple_api_5
      - routing_api_build
